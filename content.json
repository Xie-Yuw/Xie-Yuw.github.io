{"meta":{"title":"地球人你好","subtitle":"","description":"","author":"Xieyuw","url":"http://yoursite.com","root":"/"},"pages":[{"title":"个人简介","date":"2020-01-19T07:27:00.000Z","updated":"2020-01-27T05:05:44.863Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"WELCOME TO MY BLOG#关于我00后本科生在读没脾气但有底线喜欢一切新鲜事物愿意不断努力尝试#兴趣爱好骑行(有过骑行环游中国/世界的想法)徒步(想用眼睛去感受这个世界)做饭(我太懒了)竞赛(算法竞赛、数学竞赛)编程(敲代码真的是一件很快乐的事情)学习(永远保持对世界的好奇心,活到老学到老)#联系方式QQ: 948011378WeChat: HeyWwoWeiBo: NocompanyZhiHu: OideaCodeforce: ?"},{"title":"categories","date":"2020-01-15T13:11:05.000Z","updated":"2020-01-15T13:12:35.486Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"reading","date":"2020-01-15T13:18:39.000Z","updated":"2020-01-15T13:18:39.215Z","comments":true,"path":"reading/index.html","permalink":"http://yoursite.com/reading/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-15T13:11:17.000Z","updated":"2020-01-15T13:12:49.585Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"NOI--找最大数序列","slug":"NOI--1.9-10找最大数序列","date":"2020-01-20T16:00:00.000Z","updated":"2020-01-21T12:12:55.279Z","comments":true,"path":"2020/01/21/NOI--1.9-10找最大数序列/","link":"","permalink":"http://yoursite.com/2020/01/21/NOI--1.9-10%E6%89%BE%E6%9C%80%E5%A4%A7%E6%95%B0%E5%BA%8F%E5%88%97/","excerpt":"","text":"题目描述10:找最大数序列 总时间限制: 1000ms 内存限制: 65536kB 描述 输入n行，每行不超过100个无符号整数，无符号数不超过4位。请输出最大整数以及最大整数所在的行号（行号从1开始）。如果该数据在多个行中出现，则按从小到大输出相应行号，行号之间以一个逗号分开。 输入 一行输入一个正整数n（n &lt;= 30）。 之后的n行，每行包含不超过100个无符号整数，整数之间以一个逗号分开。 输出 第一行：最大整数； 第二行：最大整数所在的行编号，逗号间隔。 样例输入 123456761,3,5,23,6,8,1420,22,13,4,1623,12,17,222,6,10,9,3,622,21,20,8,1022,1,23,6,8,19,23 样例输出 12231,3,6 思路: 注意一下输入格式。 AC代码：1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 10000;int a[N];int b[N];int d[N];int main()&#123; int n; cin&gt;&gt;n; char c; for(int i&#x3D;0;i&lt;n;i++)&#123; memset(a,0,sizeof(a)); int j&#x3D;0; do&#123; cin&gt;&gt;a[j++]; &#125;while(getchar()!&#x3D;&#39;\\n&#39;); sort(a,a+j); b[i] &#x3D; a[j-1];&#125; int max &#x3D; -1; for(int i&#x3D;0;i&lt;n;i++)&#123; if(b[i]&gt;max) max &#x3D; b[i]; &#125; cout&lt;&lt;max&lt;&lt;endl; int k&#x3D;0; for(int i&#x3D;0;i&lt;n;i++)&#123; if(b[i]&#x3D;&#x3D;max) d[k++] &#x3D; i+1; &#125; cout&lt;&lt;d[0]; for(int i&#x3D;1;i&lt;k;i++)&#123; cout&lt;&lt;&quot;,&quot;&lt;&lt;d[i]; &#125; cout&lt;&lt;endl; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"基础编程","slug":"基础编程","permalink":"http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B/"}]},{"title":"NOI--错误探测","slug":"NOI--错误探测","date":"2020-01-20T16:00:00.000Z","updated":"2020-01-23T09:19:20.124Z","comments":true,"path":"2020/01/21/NOI--错误探测/","link":"","permalink":"http://yoursite.com/2020/01/21/NOI--%E9%94%99%E8%AF%AF%E6%8E%A2%E6%B5%8B/","excerpt":"","text":"04:错误探测 总时间限制: 1000ms 内存限制: 65536kB 描述 给定n*n由0和1组成的矩阵，如果矩阵的每一行和每一列的1的数量都是偶数，则认为符合条件。 你的任务就是检测矩阵是否符合条件，或者在仅改变一个矩阵元素的情况下能否符合条件。 “改变矩阵元素”的操作定义为0变成1或者1变成0。 输入 输入n + 1行，第1行为矩阵的大小n(0 &lt; n &lt; 100)，以下n行为矩阵的每一行的元素，元素之间以一个空格分开。 输出 如果矩阵符合条件，则输出OK； 如果矩阵仅改变一个矩阵元素就能符合条件，则输出需要改变的元素所在的行号和列号，以一个空格分开。 如果不符合以上两条，输出Corrupt。 样例输入 1234567891011121314151617181920样例输入141 0 1 00 0 0 01 1 1 10 1 0 1样例输入241 0 1 00 0 1 01 1 1 10 1 0 1样例输入341 0 1 00 1 1 01 1 1 10 1 0 1 样例输出 12345678样例输出1OK样例输出22 3样例输出3Corrupt WA代码：123456789101112131415161718192021222324252627282930#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int M &#x3D; 100+5;const int N &#x3D; 100+5;int a[M][N]&#x3D;&#123;0&#125;;int main()&#123; int n; int c &#x3D; 0,r &#x3D; 0; cin&gt;&gt;n; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123; cin&gt;&gt;a[i][j]; a[0][j] &#x3D; (a[0][j]+a[i][j])%2;&#x2F;&#x2F;感觉这个地方还是很巧妙的(get) a[i][0] &#x3D; (a[i][0]+a[i][j])%2; &#125; &#125; for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123; if(a[0][j]&#x3D;&#x3D;1) r &#x3D; j; &#125; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; if(a[i][0]&#x3D;&#x3D;1) c &#x3D; i; &#125; if(c&#x3D;&#x3D;0&amp;&amp;r&#x3D;&#x3D;0) cout&lt;&lt;&quot;OK&quot;&lt;&lt;endl; else if(c!&#x3D;0&amp;&amp;r!&#x3D;0)cout&lt;&lt;c&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl; else cout&lt;&lt;&quot;Corrupt&quot;&lt;&lt;endl; return 0;&#125; 感觉思路也没什么问题，写了几组数据测试发现其中一组数据有问题 1234540 0 0 01 1 0 10 0 0 11 1 1 1 当有多行/列为奇数时，只返回第一组检测的序号。（其实这个时候应该是Corrupt) 所以应该增加两个变量来记录行或列为奇数的行数/列数。 AC代码:123456789101112131415161718192021222324252627282930313233343536#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int M &#x3D; 100+5;const int N &#x3D; 100+5;int a[M][N]&#x3D;&#123;0&#125;;int main()&#123; int n; int c &#x3D; 0,r &#x3D; 0,c1 &#x3D; 0,r1 &#x3D; 0; cin&gt;&gt;n; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123; cin&gt;&gt;a[i][j]; a[0][j] &#x3D; (a[0][j]+a[i][j])%2; a[i][0] &#x3D; (a[i][0]+a[i][j])%2; &#125; &#125; for(int j&#x3D;1;j&lt;&#x3D;n;j++)&#123; if(a[0][j]&#x3D;&#x3D;1)&#123; r &#x3D; j; r1++; &#125; &#125; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; if(a[i][0]&#x3D;&#x3D;1)&#123; c &#x3D; i; c1++; &#125;&#125; if(c1&#x3D;&#x3D;0&amp;&amp;r1&#x3D;&#x3D;0) cout&lt;&lt;&quot;OK&quot;&lt;&lt;endl; else if(c1&#x3D;&#x3D;1&amp;&amp;r1&#x3D;&#x3D;1)cout&lt;&lt;c&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl; else cout&lt;&lt;&quot;Corrupt&quot;&lt;&lt;endl; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"基础编程","slug":"基础编程","permalink":"http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B/"}]},{"title":"校园导航","slug":"校园导航","date":"2020-01-09T16:00:00.000Z","updated":"2020-01-19T10:33:45.915Z","comments":true,"path":"2020/01/10/校园导航/","link":"","permalink":"http://yoursite.com/2020/01/10/%E6%A0%A1%E5%9B%AD%E5%AF%BC%E8%88%AA/","excerpt":"","text":"校园导航-STD这是之前数据结构做的一个图的实验。 一、题目要求图是应用极为广泛的数据结构，也是这门课程的重点。它的特点在于非线性。稀疏矩阵 的十字链表存储结构也是图的一种存储结构，故也把它们归在这次实习中。本 章 实习继续突 出了数据结构加操作的程序设计观点，但根据这两种结构的非线性特点，将 操 作 进一步集中 在遍历操作上，因为遍历操作是其他众多操作的基础。遍历逻辑的（或符号形式的）结构， 访问动作可是任何操作。本 次 实习还希望达到熟悉各种存储结构的特征，以及如何应用树和 图结构解决具体问题（即原理与应用的结合）等目的。 图的基本操作 [问题描述] 分别用邻接矩阵和邻接表实现以下操作：图的创建、遍历、插入、删除、最短路径。 [基本要求] 熟悉图的常用存储结构和基本操作 二、设计思路先构造数据 所有地点:春晖楼 开元楼 图书馆 十栋 基教 学院楼 消社 任意两个地点的路径长度： 春晖楼 开元楼 50 春晖楼 图书馆 300 春晖楼 基教 400 开元楼 基教 200 基教 学院楼 50 学院楼 图书馆 10 十栋 开元楼 250 十栋 消社 20 消社 基教 100 增加的地点: 消社 招待所 700 学院楼 招待所 450 构建一个无向网 用邻接矩阵来存储任意两个地点的关系。 图的遍历用DFS递归来输出地点，任意两点间的最短路径用弗洛伊德算法。 三、代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;cstring&gt;using namespace std;#define MaxInt 32767#define MVNum 100typedef string VerTexType;typedef int ArcType;int vis[MVNum]&#x3D;&#123;0&#125;;int n&#x3D;0;int Path[MVNum][MVNum];int D[MVNum][MVNum];typedef struct&#123; VerTexType vexs[MVNum]; ArcType arcs[MVNum][MVNum]; int vexnum,arcnum;&#125;AMGraph;int LocateVex(AMGraph G,string u)&#123; for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123; if(u&#x3D;&#x3D;G.vexs[i]) &#123; return i; break; &#125; else continue; &#125;&#125;void Create(AMGraph &amp;G)&#123; int w; string v1,v2; printf(&quot;请输入总地点数和路径数:&quot;); cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum; printf(&quot;请输入所有地点:\\n&quot;);&#x2F;&#x2F;春晖楼 开元楼 图书馆 十栋 基教 学院楼消社 for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123; cin&gt;&gt;G.vexs[i]; &#125; for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++) for(int j&#x3D;1;j&lt;&#x3D;G.vexnum;j++) G.arcs[i][j]&#x3D;MaxInt; for(int k&#x3D;1;k&lt;&#x3D;G.arcnum;k++)&#123; printf(&quot;请输入两个地点及其路径:&quot;); cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w; int m&#x3D;LocateVex(G,v1); int n&#x3D;LocateVex(G,v2); G.arcs[m][n]&#x3D;w; G.arcs[n][m]&#x3D;w;&#125;&#125; void Display(AMGraph G,int v)&#123; if(n&gt;G.vexnum) return; if(!vis[v])&#123; vis[v]&#x3D;1; cout&lt;&lt;G.vexs[v]&lt;&lt;&quot; &quot;; for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123; if(G.arcs[v][i]!&#x3D;MaxInt&amp;&amp;vis[i]&#x3D;&#x3D;0) &#123; n++; Display(G,i); &#125; else continue;&#125;&#125;&#125;void Insert(AMGraph &amp;G)&#123; int w; string v1,v2; printf(&quot;请输入你要增加的地点和路径的数目:&quot;); int p,q; cin&gt;&gt;p&gt;&gt;q; int t&#x3D;G.vexnum; G.vexnum+&#x3D;p; G.arcnum+&#x3D;q; for(int k&#x3D;t+1;k&lt;&#x3D;G.vexnum;k++)&#123; for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++) G.arcs[i][k]&#x3D;MaxInt; for(int j&#x3D;1;j&lt;&#x3D;G.vexnum;j++) G.arcs[k][j]&#x3D;MaxInt; &#125; cout&lt;&lt;&quot;请输入增加的地点:&quot;; for(int i&#x3D;t+1;i&lt;&#x3D;G.vexnum;i++) cin&gt;&gt;G.vexs[i]; for(int i&#x3D;1;i&lt;&#x3D;q;i++)&#123; printf(&quot;请输入两个地点及其路径:&quot;); cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w; int m&#x3D;LocateVex(G,v1); int n&#x3D;LocateVex(G,v2); G.arcs[m][n]&#x3D;w; G.arcs[n][m]&#x3D;w; &#125; &#125; void Delete(AMGraph &amp;G)&#123; int l&#x3D;0; string u; cout&lt;&lt;&quot;请输入要删除的地点:&quot;; cin&gt;&gt;u; int t&#x3D;LocateVex(G,u); for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123; if(G.arcs[t][i]!&#x3D;MaxInt) l++; &#125; G.arcnum-&#x3D;l; for(int i&#x3D;1;i&lt;&#x3D;G.vexnum;i++)&#123; G.arcs[i][t]&#x3D;MaxInt; G.arcs[t][i]&#x3D;MaxInt; &#125; G.vexs[t]&#x3D;&quot;&quot;;&#125;void Floyd(AMGraph G)&#123; int i,j,k; for (i&#x3D;1;i&lt;&#x3D;G.vexnum;i++) for (j&#x3D;1;j&lt;&#x3D;G.vexnum;j++) &#123; D[i][j] &#x3D; G.arcs[i][j]; if (D[i][j]&lt;MaxInt &amp;&amp; i!&#x3D;j) Path[i][j] &#x3D; i; else Path[i][j] &#x3D; -1; &#125; for(k&#x3D;1;k&lt;&#x3D;G.vexnum;k++) for(i&#x3D;1;i&lt;&#x3D;G.vexnum;i++) for(j&#x3D;1;j&lt;&#x3D;G.vexnum;j++) if(D[i][k]+D[k][j]&lt;D[i][j]) &#123; D[i][j] &#x3D; D[i][k] + D[k][j]; Path[i][j] &#x3D; Path[k][j]; &#125;&#125; void ShortPath(AMGraph G)&#123; string s1,s2; int vs,ve,x,temp; cout&lt;&lt;&quot;请输入起点和终点:&quot;; cin&gt;&gt;s1&gt;&gt;s2; vs&#x3D;LocateVex(G,s1); ve&#x3D;LocateVex(G,s2); cout&lt;&lt;&quot;最短路径长为：&quot;; cout&lt;&lt;D[vs][ve]&lt;&lt;endl; stack&lt;int&gt; sta; sta.push(ve); x &#x3D; ve; while (Path[vs][x]!&#x3D;vs) &#123; sta.push(Path[vs][x]); x &#x3D; Path[vs][x]; &#125; sta.push(vs); cout&lt;&lt;&quot;最短路径为: &quot;; temp &#x3D; sta.top(); sta.pop(); cout&lt;&lt;G.vexs[temp]; while (!sta.empty()) &#123; temp &#x3D; sta.top(); sta.pop(); cout&lt;&lt;&quot;-&gt;&quot;&lt;&lt;G.vexs[temp]; &#125; puts(&quot;&quot;);&#125;void menu()&#123; cout&lt;&lt;&quot;*********************************************************&quot;&lt;&lt;endl; cout&lt;&lt;&quot;-----------------石家庄铁道大学校园导航------------------&quot;&lt;&lt;endl; cout&lt;&lt;&quot;*********************************************************&quot;&lt;&lt;endl; cout&lt;&lt;&quot;* 1. 图的创建 *&quot;&lt;&lt;endl; cout&lt;&lt;&quot;* 2. 图的遍历 *&quot;&lt;&lt;endl; cout&lt;&lt;&quot;* 3. 图的插入 *&quot;&lt;&lt;endl; cout&lt;&lt;&quot;* 4. 图的删除 *&quot;&lt;&lt;endl; cout&lt;&lt;&quot;* 5. 最短路径 *&quot;&lt;&lt;endl; cout&lt;&lt;&quot;* 0. 返回主界面 *&quot;&lt;&lt;endl; &#125; int main()&#123; AMGraph G; int k; int t1,t2,t3; string v,u; menu(); while(1)&#123; cout&lt;&lt;&quot;请选择:&quot;&lt;&lt;endl; cin&gt;&gt;k; switch (k)&#123; case 1: Create(G);break; case 2: printf(&quot;请输入出发点:&quot;); cin&gt;&gt;v; cout&lt;&lt;&quot;从出发点开始遍历的路线为:&quot;; t1&#x3D;LocateVex(G,v); Display(G,t1); cout&lt;&lt;endl; break; case 3: Insert(G); printf(&quot;请输入出发点:&quot;); cin&gt;&gt;u; cout&lt;&lt;&quot;从出发点开始遍历的路线为:&quot;; t2&#x3D;LocateVex(G,u); n&#x3D;0; memset(vis,0,sizeof(vis)); Display(G,t2); cout&lt;&lt;endl; break; case 4: Delete(G); printf(&quot;请输入出发点:&quot;); cin&gt;&gt;u; cout&lt;&lt;&quot;从出发点开始遍历的路线为:&quot;; t3&#x3D;LocateVex(G,u); n&#x3D;0; memset(vis,0,sizeof(vis)); Display(G,t3); cout&lt;&lt;endl; break; case 5: Floyd(G); ShortPath(G); break; case 0: menu(); break; &#125;&#125; return 0;&#125; 四、功能测试","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/%E5%9B%BE/"}]},{"title":"VJudge--二叉搜索树","slug":"二叉搜索树","date":"2019-12-07T16:00:00.000Z","updated":"2020-01-19T10:43:07.070Z","comments":true,"path":"2019/12/08/二叉搜索树/","link":"","permalink":"http://yoursite.com/2019/12/08/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"题目 - A Bug’s LifeBackgroundProfessor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs.ProblemGiven a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it. Input The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one. Output The output for every scenario is a line containing “Scenario #i:”, where i is the number of the scenario starting at 1, followed by one line saying either “No suspicious bugs found!” if the experiment is consistent with his assumption about the bugs’ sexual behavior, or “Suspicious bugs found!” if Professor Hopper’s assumption is definitely wrong. Sample Input 1234567823 31 22 31 34 21 23 4 Sample Output 12345Scenario #1:Suspicious bugs found!Scenario #2:No suspicious bugs found! Hint Huge input,scanf is recommended. 题目大意:t组数据，n个虫子，m组相互喜爱的关系，虫子分为雌雄两种，每个虫子只有一个性别，问是否存在同性恋的虫子。 思路：与犯罪团伙那个题差不多。 AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;using namespace std;int pre[20010];int r[20010];&#x2F;&#x2F;&#x2F;r&#x3D;0代表与根节点同性int Find(int x)&#123; int t; if(pre[x]&#x3D;&#x3D;x) &#123; return x; &#125; t&#x3D;pre[x]; pre[x]&#x3D;Find(pre[x]);&#x2F;&#x2F;&#x2F;压缩路径 r[x]&#x3D;(r[x]+r[t]+1)%2; return pre[x];&#125;void Union(int a,int b)&#123; int x,y; x&#x3D;Find(a); y&#x3D;Find(b); pre[x]&#x3D;y; r[x]&#x3D;(r[b]-r[a])%2;&#125;int main()&#123; int t,i,j,k,flag; int n,m,a,b; scanf(&quot;%d&quot;,&amp;t); for(k&#x3D;1;k&lt;&#x3D;t;k++) &#123; flag&#x3D;0; scanf(&quot;%d%d&quot;,&amp;n,&amp;m); for(i&#x3D;1; i&lt;&#x3D;n; i++) &#123; r[i]&#x3D;1; pre[i]&#x3D;i; &#125; for(i&#x3D;1; i&lt;&#x3D;m; i++) &#123; scanf(&quot;%d%d&quot;,&amp;a,&amp;b); if(Find(a)&#x3D;&#x3D;Find(b)) &#123; if(r[a]&#x3D;&#x3D;r[b])&#x2F;&#x2F;&#x2F;同性 &#123; flag&#x3D;1; &#125; &#125; else &#123; Union(a,b); &#125; &#125; if(flag) &#123; printf(&quot;Scenario #%d:\\nSuspicious bugs found!\\n\\n&quot;,k); &#125; else &#123; printf(&quot;Scenario #%d:\\nNo suspicious bugs found!\\n\\n&quot;,k); &#125; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"BST","slug":"BST","permalink":"http://yoursite.com/tags/BST/"}]},{"title":"VJudge--Farm Irrigation","slug":"Farm Irrigation ","date":"2019-12-03T16:00:00.000Z","updated":"2020-01-19T10:44:20.615Z","comments":true,"path":"2019/12/04/Farm Irrigation /","link":"","permalink":"http://yoursite.com/2019/12/04/Farm%20Irrigation%20/","excerpt":"","text":"题目 - Farm IrrigationBenny has a spacious farm land to irrigate. The farm land is a rectangle, and is divided into a lot of samll squares. Water pipes are placed in these squares. Different square has a different type of pipe. There are 11 types of pipes, which is marked from A to K, as Figure 1 shows. Figure 1 Benny has a map of his farm, which is an array of marks denoting the distribution of water pipes over the whole farm. For example, if he has a map ADCFJKIHE then the water pipes are distributed like Figure 2 Several wellsprings are found in the center of some squares, so water can flow along the pipes from one square to another. If water flow crosses one square, the whole farm land in this square is irrigated and will have a good harvest in autumn. Now Benny wants to know at least how many wellsprings should be found to have the whole farm land irrigated. Can you help him? Note: In the above example, at least 3 wellsprings are needed, as those red points in Figure 2 show. Input There are several test cases! In each test case, the first line contains 2 integers M and N, then M lines follow. In each of these lines, there are N characters, in the range of ‘A’ to ‘K’, denoting the type of water pipe over the corresponding square. A negative M or N denotes the end of input, else you can assume 1 &lt;= M, N &lt;= 50. Output For each test case, output in one line the least number of wellsprings needed. Sample Input 123456789102 2DKHF3 3ADCFJKIHE-1 -1 Sample Output 1223 题目大意:浇灌田地，图中的蓝色的线代表水管，水管能连起来的用一个泉源即可浇灌，问浇灌这片田地用需要多少个泉源。 思路：求用的源泉数就是求有几个不连通的图，遍历每块田地，只要考虑它和左边和上边的田地是否能并合并就可以了。对于左边和上边哪两块能够合并，由图可知： 上联通：ABEGHJK下联通：CDEHIJK左联通：ACFGHIK右联通：BDFGIJK AC代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;iostream&gt;using namespace std;const int N&#x3D;52;char maze[N][N];int parent[N*N];void init(int n)&#123; for(int i&#x3D;1;i&lt;&#x3D;n;i++) parent[i]&#x3D;i;&#125;int find(int x)&#123; return parent[x]&#x3D;&#x3D;x?x:find(parent[x]);&#125;void unite(int x,int y)&#123; x&#x3D;find(x); y&#x3D;find(y); if(x&#x3D;&#x3D;y) return; parent[x]&#x3D;y;&#125;int main()&#123; int n,m; while(cin&gt;&gt;n&gt;&gt;m&amp;&amp;n!&#x3D;-1&amp;&amp;m!&#x3D;-1) &#123; init(n*m); for(int i&#x3D;1;i&lt;&#x3D;n;i++) for(int j&#x3D;1;j&lt;&#x3D;m;j++) &#123; cin&gt;&gt;maze[i][j]; &#125; for(int i&#x3D;1;i&lt;&#x3D;n;i++) for(int j&#x3D;1;j&lt;&#x3D;m;j++) &#123; if(j-1&gt;&#x3D;1) &#123; if((maze[i][j-1]&#x3D;&#x3D;&#39;B&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;D&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;F&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;G&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;I&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;J&#39;||maze[i][j-1]&#x3D;&#x3D;&#39;K&#39;) &amp;&amp;(maze[i][j]&#x3D;&#x3D;&#39;C&#39;||maze[i][j]&#x3D;&#x3D;&#39;F&#39;||maze[i][j]&#x3D;&#x3D;&#39;G&#39;||maze[i][j]&#x3D;&#x3D;&#39;H&#39;||maze[i][j]&#x3D;&#x3D;&#39;I&#39;||maze[i][j]&#x3D;&#x3D;&#39;A&#39;||maze[i][j]&#x3D;&#x3D;&#39;K&#39;)) unite((i-1)*m+j-1,(i-1)*m+j); &#125; if(i-1&gt;&#x3D;1) &#123; if((maze[i-1][j]&#x3D;&#x3D;&#39;C&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;D&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;E&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;H&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;I&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;J&#39;||maze[i-1][j]&#x3D;&#x3D;&#39;K&#39;)&amp;&amp; (maze[i][j]&#x3D;&#x3D;&#39;A&#39;||maze[i][j]&#x3D;&#x3D;&#39;B&#39;||maze[i][j]&#x3D;&#x3D;&#39;E&#39;||maze[i][j]&#x3D;&#x3D;&#39;G&#39;||maze[i][j]&#x3D;&#x3D;&#39;H&#39;||maze[i][j]&#x3D;&#x3D;&#39;J&#39;||maze[i][j]&#x3D;&#x3D;&#39;K&#39;)) unite((i-1-1)*m+j,(i-1)*m+j); &#125; &#125; int num&#x3D;0; for(int i&#x3D;1;i&lt;&#x3D;n*m;i++) if(parent[i]&#x3D;&#x3D;i) num++; cout&lt;&lt;num&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--Is It A Tree?","slug":"Is It A Tree ","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-19T10:43:58.979Z","comments":true,"path":"2019/12/03/Is It A Tree /","link":"","permalink":"http://yoursite.com/2019/12/03/Is%20It%20A%20Tree%20/","excerpt":"","text":"题目 - Is It A Tree?A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties.There is exactly one node, called the root, to which no directed edges point. Every node except the root has exactly one edge pointing to it. There is a unique sequence of directed edges from the root to each node. For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not. In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not. Input The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. Output For each test case display the line Case k is a tree.&quot; or the lineCase k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1). Sample Input 12345676 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 Sample Output 123Case 1 is a tree.Case 2 is a tree.Case 3 is not a tree. 题目大意:判断给出的数据能否构成一颗树。 思路：构成一颗有向树的条件: 不能有环 只有一个根即只有一个入度为0的点，否则是森林 除了根结点之外的其他点的入度为1 任意两个点之间都能连通 然后注意一下空树也算树。 计算根节点个数，然后除根结点之外其他的入度均要为1，判断是否是森林，即只有一个根节点。 AC代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include&lt;iostream&gt;using namespace std;const int MAX&#x3D;1e4+10;int pre[MAX];int in[MAX];int vis[MAX];void init()&#123; int i; for(i&#x3D;1; i&lt;MAX; i++) &#123; vis[i]&#x3D;0; in[i]&#x3D;0; pre[i]&#x3D;i; &#125;&#125;int Find(int x)&#123; if(pre[x]&#x3D;&#x3D;x) &#123; return x; &#125; else &#123; return Find(pre[x]); &#125;&#125;void Union(int root1,int root2)&#123; int x,y; x&#x3D;Find(root1); y&#x3D;Find(root2); if(x!&#x3D;y) &#123; pre[x]&#x3D;y; &#125;&#125;int main()&#123; int i,root,counts,a,b,flag,ans&#x3D;1; while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!&#x3D;EOF) &#123; if(a&#x3D;&#x3D;-1&amp;&amp;b&#x3D;&#x3D;-1) &#123; break; &#125; if(a&#x3D;&#x3D;0&amp;&amp;b&#x3D;&#x3D;0) &#123; printf(&quot;Case %d is a tree.\\n&quot;,ans); ans++; continue; &#125; init(); vis[a]&#x3D;1; vis[b]&#x3D;1; in[b]++; Union(a,b); while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!&#x3D;EOF) &#123; if(a&#x3D;&#x3D;0&amp;&amp;b&#x3D;&#x3D;0) &#123; break; &#125; vis[a]&#x3D;1; vis[b]&#x3D;1; in[b]++; Union(a,b); &#125; flag&#x3D;1; root&#x3D;0; counts&#x3D;0; for(i&#x3D;1;i&lt;MAX;i++) &#123; if(vis[i]&amp;&amp;in[i]&#x3D;&#x3D;0) &#123; root++; &#125; if(in[i]&gt;&#x3D;2) &#123; flag&#x3D;0; &#125; if(vis[i]&amp;&amp;pre[i]&#x3D;&#x3D;i) &#123; counts++; &#125; &#125; if(root!&#x3D;1||counts&gt;1) &#123; flag&#x3D;0; &#125; if(flag) &#123; printf(&quot;Case %d is a tree.\\n&quot;,ans); ans++; &#125; else &#123; printf(&quot;Case %d is not a tree.\\n&quot;,ans); ans++; &#125; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--More is better","slug":"More is better","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-19T10:43:45.764Z","comments":true,"path":"2019/12/03/More is better/","link":"","permalink":"http://yoursite.com/2019/12/03/More%20is%20better/","excerpt":"","text":"题目 - More is betterMr Wang wants some boys to help him with a project. Because the project is rather complex, the more boys come, the better it will be. Of course there are certain requirements. Mr Wang selected a room big enough to hold the boys. The boy who are not been chosen has to leave the room immediately. There are 10000000 boys in the room numbered from 1 to 10000000 at the very beginning. After Mr Wang’s selection any two of them who are still in this room should be friends (direct or indirect), or there is only one boy left. Given all the direct friend-pairs, you should decide the best way. Input The first line of the input contains an integer n (0 ≤ n ≤ 100 000) - the number of direct friend-pairs. The following n lines each contains a pair of numbers A and B separated by a single space that suggests A and B are direct friends. (A ≠ B, 1 ≤ A, B ≤ 10000000) Output The output in one line contains exactly one integer equals to the maximum number of boys Mr Wang may keep. Sample Input 1234567891041 23 45 61 641 23 45 67 8 Sample Output 1242 Hint 12345A and B are friends(direct or indirect), B and C are friends(direct or indirect), then A and C are also friends(indirect). In the first sample &#123;1,2,5,6&#125; is the result.In the second sample &#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;,&#123;7,8&#125; are four kinds of answers. 题目大意:A和B是朋友（直接或间接），B和C是朋友（直接或间接），那么A和C也是朋友（间接）。 在第一个样本{1,2,5,6}中是结果。在第二个示例{1,2}，{3,4}，{5,6}，{7,8}中有四种答案。 思路： 比上道龙珠题简单的多其实都差不多 AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;#define maxn 110000int N, sum;int per[maxn], ran[maxn]; void init() &#123; sum &#x3D; 0; for(int i &#x3D; 1; i &lt;&#x3D; maxn; ++i)&#123; per[i] &#x3D; i; ran[i] &#x3D; 1; &#125;&#125; int find(int x)&#123; int r &#x3D; x; while( r !&#x3D; per[r]) r &#x3D; per[r]; per[x] &#x3D; r; return r;&#125; void join (int a, int b)&#123; int fa &#x3D; find(a); int fb &#x3D; find(b); if(fa !&#x3D; fb)&#123; per[fa] &#x3D; fb; ran[fb] +&#x3D; ran[fa]; sum &#x3D; max(sum, ran[fb]); &#125;&#125; int main ()&#123; while(scanf(&quot;%d&quot;, &amp;N) !&#x3D; EOF)&#123; init(); if(N &#x3D;&#x3D; 0)&#123; printf(&quot;1\\n&quot;); continue; &#125; while(N--)&#123; int a, b; scanf(&quot;%d%d&quot;, &amp;a, &amp;b); join(a, b); &#125; printf(&quot;%d\\n&quot;, sum); &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--小希的迷宫","slug":"小希的迷宫","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-19T10:41:55.448Z","comments":true,"path":"2019/12/03/小希的迷宫/","link":"","permalink":"http://yoursite.com/2019/12/03/%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB/","excerpt":"","text":"题目 - 小希的迷宫上次Gardon的迷宫城堡小希玩了很久（见Problem B），现在她也想设计一个迷宫让Gardon来走。但是她设计迷宫的思路不一样，首先她认为所有的通道都应该是双向连通的，就是说如果有一个通道连通了房间A和B，那么既可以通过它从房间A走到房间B，也可以通过它从房间B走到房间A，为了提高难度，小希希望任意两个房间有且仅有一条路径可以相通（除非走了回头路）。小希现在把她的设计图给你，让你帮忙判断她的设计图是否符合她的设计思路。比如下面的例子，前两个是符合条件的，但是最后一个却有两种方法从5到达8。 Input 输入包含多组数据，每组数据是一个以0 0结尾的整数对列表，表示了一条通道连接的两个房间的编号。房间的编号至少为1，且不超过100000。每两组数据之间有一个空行。整个文件以两个-1结尾。 Output 对于输入的每一组数据，输出仅包括一行。如果该迷宫符合小希的思路，那么输出”Yes”，否则输出”No”。 Sample Input 123456789106 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 Sample Output 123YesYesNo 题目大意:判断该图是不是连通并且无环的。 思路：用并查集来判断是否是连通的。 如果父节点相同，则有环。 AC代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e5+10;int par[N];bool vis[N];int Find(int x)&#123; if(par[x] &#x3D;&#x3D; x) return x; return par[x] &#x3D; Find(par[x]);&#125;bool unite(int x,int y)&#123; x &#x3D; Find(x); y &#x3D; Find(y); if(x !&#x3D; y) &#123; par[x] &#x3D; y; return true; &#125; return false;&#125;int main()&#123; int a, b; while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b)) &#123; if(a&#x3D;&#x3D;-1 &amp;&amp; b&#x3D;&#x3D;-1) break; if(a&#x3D;&#x3D;0 &amp;&amp; b&#x3D;&#x3D;0) &#123; printf(&quot;Yes\\n&quot;); continue; &#125; for(int i &#x3D; 0; i &lt;&#x3D; N; i++) par[i] &#x3D; i; unite(a,b); vis[a] &#x3D; vis[b] &#x3D; true; bool flag &#x3D; true; while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b) &amp;&amp; a) &#123; bool ans &#x3D; unite(a,b); vis[a] &#x3D; vis[b] &#x3D; true; if(!ans) flag &#x3D; false; &#125; int k &#x3D; 0; for(int i &#x3D; 0; i &lt; N; i++) &#123; if(vis[i] &amp;&amp; par[i]&#x3D;&#x3D;i) k++; &#125; if(k &gt; 1) flag &#x3D; false; if(flag) printf(&quot;Yes\\n&quot;); else printf(&quot;No\\n&quot;); &#125;return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--Dragon Balls","slug":"Dragon Balls","date":"2019-12-01T16:00:00.000Z","updated":"2020-01-19T10:44:31.495Z","comments":true,"path":"2019/12/02/Dragon Balls/","link":"","permalink":"http://yoursite.com/2019/12/02/Dragon%20Balls/","excerpt":"","text":"题目 - Dragon BallsFive hundred years later, the number of dragon balls will increase unexpectedly, so it’s too difficult for Monkey King(WuKong) to gather all of the dragon balls together.His country has N cities and there are exactly N dragon balls in the world. At first, for the ith dragon ball, the sacred dragon will puts it in the ith city. Through long years, some cities’ dragon ball(s) would be transported to other cities. To save physical strength WuKong plans to take Flying Nimbus Cloud, a magical flying cloud to gather dragon balls.Every time WuKong will collect the information of one dragon ball, he will ask you the information of that ball. You must tell him which city the ball is located and how many dragon balls are there in that city, you also need to tell him how many times the ball has been transported so far. Input The first line of the input is a single positive integer T(0 &lt; T &lt;= 100).For each case, the first line contains two integers: N and Q (2 &lt; N &lt;= 10000 , 2 &lt; Q &lt;= 10000).Each of the following Q lines contains either a fact or a question as the follow format: T A B : All the dragon balls which are in the same city with A have been transported to the city the Bth ball in. You can assume that the two cities are different. Q A : WuKong want to know X (the id of the city Ath ball is in), Y (the count of balls in Xth city) and Z (the tranporting times of the Ath ball). (1 &lt;= A, B &lt;= N) Output For each test case, output the test case number formated as sample output. Then for each query, output a line with three integers X Y Z saparated by a blank space. Sample Input 1234567891023 3T 1 2T 3 2Q 23 4T 1 2Q 1T 1 3Q 1 Sample Output 12345Case 1:2 3 0Case 2:2 2 13 3 2 题目大意:初始时，有n个龙珠，编号从1到n，分别对应的放在编号从1到n的城市中。现在有两种操作： T A B，表示把A球所在城市全部的龙珠全部转移到B城市。（第一次时，因为A球所在的城市只有一个球，所以只移动1个，如果有多个，则全部移动）。 Q A，表示查询A。要求得到的信息分别是：A现在所在的城市，A所在城市的龙珠数目，A转移到该城市移动的次数（如果没有移动就输出0） 思路： qwq嫌弃..这个字也太丑了！！ AC代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt;using namespace std;const int maxn&#x3D;1e5+10;int f[maxn];int sum[maxn];int Move[maxn];int n,m;void init_set()&#123; for(int i&#x3D;1; i&lt;&#x3D;n; i++) &#123; f[i]&#x3D;i; sum[i]&#x3D;1; Move[i]&#x3D;0; &#125;&#125;int find_set(int x)&#123; if(x!&#x3D;f[x]) &#123; int t&#x3D;f[x]; f[x]&#x3D;find_set(f[x]); Move[x]+&#x3D;Move[t]; return f[x]; &#125; return x;&#125;void unit_set(int x,int y)&#123; x&#x3D;find_set(x); y&#x3D;find_set(y); if(x&#x3D;&#x3D;y)return; f[x]&#x3D;y; sum[y]+&#x3D;sum[x]; Move[x]++;&#125;int main()&#123; int t; int l&#x3D;0; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; l++; printf(&quot;Case %d:\\n&quot;,l); scanf(&quot;%d%d&quot;,&amp;n,&amp;m); init_set(); for(int i&#x3D;0; i&lt;m; i++) &#123; char s[6]; scanf(&quot;%s&quot;,s); if(s[0]&#x3D;&#x3D;&#39;T&#39;) &#123; int x,y; scanf(&quot;%d%d&quot;,&amp;x,&amp;y); unit_set(x,y); &#125; else if(s[0]&#x3D;&#x3D;&#39;Q&#39;) &#123; int x; scanf(&quot;%d&quot;,&amp;x); int ans&#x3D;find_set(x); printf(&quot;%d %d %d\\n&quot;,ans,sum[ans],Move[x]); &#125; &#125; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--Find them, Catch them","slug":"Find them, Catch them","date":"2019-11-30T16:00:00.000Z","updated":"2020-01-19T10:44:11.175Z","comments":true,"path":"2019/12/01/Find them, Catch them/","link":"","permalink":"http://yoursite.com/2019/12/01/Find%20them,%20Catch%20them/","excerpt":"","text":"题目 - Find them, Catch themThe police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) Assume N (N &lt;= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M &lt;= 10^5) messages in sequence, which are in the following two kinds: \\1. D [a] [b]where [a] and [b] are the numbers of two criminals, and they belong to different gangs. \\2. A [a] [b]where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. Input The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above. Output For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.” Sample Input 123456715 5A 1 2D 1 2A 1 2D 2 4A 1 4 Sample Output 123Not sure yet.In different gangs.In the same gang 题目大意:在一个城市里有两种不同的犯罪团伙。首先输入T表示有T组测试，然后输入N和M，表示有N个罪犯（编号从1到N）而且接下来有M个操作。操作分为两种： 1.D a b，表示编号为a和b的两个罪犯属于不同的犯罪团伙； 2.A a b，表示询问编号为a和b的两个罪犯是否是同一个犯罪团伙或者不确定。 对于每一个A操作，根据题意都要有相应的回答（输出）。 思路：一道标准的关系型并查集题。普通的并查集是给几个同类的元素，而关系型并查集是给不同类的元素，然后求各个元素之间的关系。对于这种题目,我们不仅需要开一个pre[]存父节点,还需要开一个r[]关系数组,来记录其和父亲的关系,r[]=0表示属于同一个帮派,r[]=1，表示不属于同一个帮派，初始化都为同一个帮派。一旦输入x和y不属于同一个帮派就将x和y连通同时更新r[]，一旦输入A，如果find（x）!=find（y）,说明还没输入它们的关系,所以不确定;如果find（x）==find(y） 由于r[]数组表示的是该节点和父节点的关系,两个节点又属于同一个节点,所以如果r[x]==r[y]则属于同一个帮派,否则不属于;处理方法:1、在利用find函数不断寻找根节点的过程中需要不断更新r[],举个例子:因为我们在利用find函数寻找根节点时有路径压缩,所以我们需要推导出子节点、父节点、和爷爷节点三者之间的关系:如果 子节点和父节点关系为r1，父节点和爷爷节点关系为r2，那么孙子节点和爷爷节点的关系为（r1+r2）%2;(两种情况所以对2去模)证明:我们可以列出所有的可能情况 （a, b） (b, c) (a, c) (r1+r2)%2 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0PS:我个人一开始对为什么子父节点之间的关系会为同一个帮派感到困惑,因为题目中给出的都是不同帮派的,其实仔细一想并不是,我们在合并连通过程中存在着路径压缩,将孙子节点变为了儿子节点通过上面的关系式就有可能出现相同的情况了;2、在用join函数就行连通是也需要及时更新r[],我们还是通过推导得出关系式,假设我们f1为x1的根节点,f2为x2的根节点,我们现在要将f1合并到f2上去, 推导关系式为 r[f1]=(r[x1]+r[x2]+1)%2;证明:我们还是罗列出一些情况: 首先需要明确一点的,我们需要合并 x1和x2以为他们两个不是同一个帮派的,所以有x1和x2的关系为1（x1, f1） (x2, f2) (x1, x2) (f1,f2)_ 0 0 1 1 0 1 1 0 1 0 1 0 1 1 1 1 AC代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;iostream&gt;using namespace std;#define N 100010 int pre[N];int r[N];int n,m;void init() &#123; for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123; pre[i]&#x3D;i; r[i]&#x3D;0; &#125; &#125;int find(int x) &#123; if(x&#x3D;&#x3D;pre[x]) return x; int tmp&#x3D;pre[x]; pre[x]&#x3D;find(pre[x]); r[x]&#x3D;(r[x]+r[tmp])%2; return pre[x]; &#125;void join(int x1,int x2) &#123; int f1&#x3D;find(x1); int f2&#x3D;find(x2); if(f1!&#x3D;f2) &#123; pre[f1]&#x3D;f2; r[f1]&#x3D;(r[x1]+r[x2]+1)%2; &#125; return ;&#125;int main() &#123; int t,i; char c; int a,b; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; scanf(&quot;%d%d&quot;,&amp;n,&amp;m); init(); getchar(); for (i&#x3D;1;i&lt;&#x3D;m;i++) &#123; scanf(&quot;%c %d %d&quot;,&amp;c,&amp;a,&amp;b); getchar(); if(c&#x3D;&#x3D;&#39;D&#39;) &#123; join(a,b); &#125; else &#123; if(find(a)!&#x3D;find(b)) printf(&quot;Not sure yet.n&quot;); else &#123; if(r[a]&#x3D;&#x3D;r[b]) printf(&quot;In the same gang.n&quot;); else printf(&quot;In different gangs.\\n&quot;); &#125; &#125; &#125; &#125; return 0; &#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--The Suspects","slug":"The Suspects","date":"2019-11-30T16:00:00.000Z","updated":"2020-01-19T10:43:30.677Z","comments":true,"path":"2019/12/01/The Suspects/","link":"","permalink":"http://yoursite.com/2019/12/01/The%20Suspects/","excerpt":"","text":"题目 - The SuspectSevere acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others.In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).Once a member in a group is a suspect, all members in the group are suspects.However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects. Input The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 &lt; n &lt;= 30000 and 0 &lt;= m &lt;= 500. Every student is numbered by a unique integer between 0 and n−1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space.A case with n = 0 and m = 0 indicates the end of the input, and need not be processed. Output For each case, output the number of suspects in one line. Sample Input 12345678910100 42 1 25 10 13 11 12 142 0 12 99 2200 21 55 1 2 3 4 51 00 0 Sample Output 123411 题目大意:给定学生总数和学生分组，0号学生得了SARS 问有SARS的嫌疑的有多少人，和0同一组即为有嫌疑。 思路： AC代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;using namespace std;int a[30005] ,group[30005], num[30005];int findgroup(int x)&#x2F;&#x2F;查询每个学生的组长是谁。&#123; if(x&#x3D;&#x3D;group[x]) return x; else return findgroup(group[x]);&#125;void join(int x,int y)&#x2F;&#x2F;在同一组的学生需要把组长选定。&#123; int grox&#x3D;findgroup(x); int groy&#x3D;findgroup(y); if(grox!&#x3D;groy) &#123; group[grox]&#x3D;groy; num[groy]+&#x3D;num[grox];&#x2F;&#x2F;每一次合并，都需要吧集合中的元素个数加进去。 &#125; return ;&#125;int main()&#123; int n,m,k; while(~scanf(&quot;%d %d&quot;,&amp;n,&amp;m)) &#123; if(n&#x3D;&#x3D;0&amp;&amp;m&#x3D;&#x3D;0) break; for(int i&#x3D;0; i&lt;n; i++) &#x2F;&#x2F;开个数组，给数组赋值，即自己自成一组并为组长。 &#123; group[i]&#x3D;i; num[i]&#x3D;1; &#125; while(m--)&#x2F;&#x2F;共有m个样例。 &#123; scanf(&quot;%d &quot;,&amp;k); for(int i&#x3D;0; i&lt;k; i++) scanf(&quot;%d&quot;,&amp;a[i]); for(int i&#x3D;0; i&lt;k-1; i++)&#x2F;&#x2F;把在同一组的几个学生合并在一起。 join(a[i],a[i+1]);&#x2F;&#x2F;如果组长不同，便把组长选定。 &#125; int t&#x3D;findgroup(0);&#x2F;&#x2F;找到生病的0号学生的组长。 printf(&quot;%d\\n&quot;,num[t]); &#125;return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--Wireless Network","slug":"Wireless Network","date":"2019-11-30T16:00:00.000Z","updated":"2020-01-19T10:43:20.430Z","comments":true,"path":"2019/12/01/Wireless Network/","link":"","permalink":"http://yoursite.com/2019/12/01/Wireless%20Network/","excerpt":"","text":"题目 - Wireless NetworkAn earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations. Input The first line contains two integers N and d (1 &lt;= N &lt;= 1001, 0 &lt;= d &lt;= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 &lt;= xi, yi &lt;= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats:\\1. “O p” (1 &lt;= p &lt;= N), which means repairing computer p.\\2. “S p q” (1 &lt;= p, q &lt;= N), which means testing whether computer p and q can communicate. The input will not exceed 300000 lines. Output For each Testing operation, print “SUCCESS” if the two computers can communicate, or “FAIL” if not. Sample Input 12345678910114 10 10 20 30 4O 1O 2O 4S 1 4O 3S 1 4 Sample Output 12FAILSUCCESS 题目大意:给定学生总数和学生分组，0号学生得了SARS 问有SARS的嫌疑的有多少人，和0同一组即为有嫌疑。 思路： AC代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;using namespace std;int a[30005] ,group[30005], num[30005];int findgroup(int x)&#x2F;&#x2F;查询每个学生的组长是谁。&#123; if(x&#x3D;&#x3D;group[x]) return x; else return findgroup(group[x]);&#125;void join(int x,int y)&#x2F;&#x2F;在同一组的学生需要把组长选定。&#123; int grox&#x3D;findgroup(x); int groy&#x3D;findgroup(y); if(grox!&#x3D;groy) &#123; group[grox]&#x3D;groy; num[groy]+&#x3D;num[grox];&#x2F;&#x2F;每一次合并，都需要吧集合中的元素个数加进去。 &#125; return ;&#125;int main()&#123; int n,m,k; while(~scanf(&quot;%d %d&quot;,&amp;n,&amp;m)) &#123; if(n&#x3D;&#x3D;0&amp;&amp;m&#x3D;&#x3D;0) break; for(int i&#x3D;0; i&lt;n; i++) &#x2F;&#x2F;开个数组，给数组赋值，即自己自成一组并为组长。 &#123; group[i]&#x3D;i; num[i]&#x3D;1; &#125; while(m--)&#x2F;&#x2F;共有m个样例。 &#123; scanf(&quot;%d &quot;,&amp;k); for(int i&#x3D;0; i&lt;k; i++) scanf(&quot;%d&quot;,&amp;a[i]); for(int i&#x3D;0; i&lt;k-1; i++)&#x2F;&#x2F;把在同一组的几个学生合并在一起。 join(a[i],a[i+1]);&#x2F;&#x2F;如果组长不同，便把组长选定。 &#125; int t&#x3D;findgroup(0);&#x2F;&#x2F;找到生病的0号学生的组长。 printf(&quot;%d\\n&quot;,num[t]); &#125;return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--A Bug's Life","slug":"A Bug's Life","date":"2019-11-30T16:00:00.000Z","updated":"2020-01-19T10:40:27.605Z","comments":true,"path":"2019/12/01/A Bug's Life/","link":"","permalink":"http://yoursite.com/2019/12/01/A%20Bug's%20Life/","excerpt":"","text":"题目 - A Bug’s LifeBackgroundProfessor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs.ProblemGiven a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it. Input The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one. Output The output for every scenario is a line containing “Scenario #i:”, where i is the number of the scenario starting at 1, followed by one line saying either “No suspicious bugs found!” if the experiment is consistent with his assumption about the bugs’ sexual behavior, or “Suspicious bugs found!” if Professor Hopper’s assumption is definitely wrong. Sample Input 1234567823 31 22 31 34 21 23 4 Sample Output 12345Scenario #1:Suspicious bugs found!Scenario #2:No suspicious bugs found! Hint Huge input,scanf is recommended. 题目大意:t组数据，n个虫子，m组相互喜爱的关系，虫子分为雌雄两种，每个虫子只有一个性别，问是否存在同性恋的虫子。 思路：与犯罪团伙那个题差不多。 AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;using namespace std;int pre[20010];int r[20010];&#x2F;&#x2F;&#x2F;r&#x3D;0代表与根节点同性int Find(int x)&#123; int t; if(pre[x]&#x3D;&#x3D;x) &#123; return x; &#125; t&#x3D;pre[x]; pre[x]&#x3D;Find(pre[x]);&#x2F;&#x2F;&#x2F;压缩路径 r[x]&#x3D;(r[x]+r[t]+1)%2; return pre[x];&#125;void Union(int a,int b)&#123; int x,y; x&#x3D;Find(a); y&#x3D;Find(b); pre[x]&#x3D;y; r[x]&#x3D;(r[b]-r[a])%2;&#125;int main()&#123; int t,i,j,k,flag; int n,m,a,b; scanf(&quot;%d&quot;,&amp;t); for(k&#x3D;1;k&lt;&#x3D;t;k++) &#123; flag&#x3D;0; scanf(&quot;%d%d&quot;,&amp;n,&amp;m); for(i&#x3D;1; i&lt;&#x3D;n; i++) &#123; r[i]&#x3D;1; pre[i]&#x3D;i; &#125; for(i&#x3D;1; i&lt;&#x3D;m; i++) &#123; scanf(&quot;%d%d&quot;,&amp;a,&amp;b); if(Find(a)&#x3D;&#x3D;Find(b)) &#123; if(r[a]&#x3D;&#x3D;r[b])&#x2F;&#x2F;&#x2F;同性 &#123; flag&#x3D;1; &#125; &#125; else &#123; Union(a,b); &#125; &#125; if(flag) &#123; printf(&quot;Scenario #%d:\\nSuspicious bugs found!\\n\\n&quot;,k); &#125; else &#123; printf(&quot;Scenario #%d:\\nNo suspicious bugs found!\\n\\n&quot;,k); &#125; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--食物链","slug":"食物链","date":"2019-11-30T16:00:00.000Z","updated":"2020-01-19T10:41:42.482Z","comments":true,"path":"2019/12/01/食物链/","link":"","permalink":"http://yoursite.com/2019/12/01/%E9%A3%9F%E7%89%A9%E9%93%BE/","excerpt":"","text":"题目 - 食物链动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。有人用两种说法对这N个动物所构成的食物链关系进行描述：第一种说法是”1 X Y”，表示X和Y是同类。第二种说法是”2 X Y”，表示X吃Y。此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。1） 当前的话与前面的某些真的话冲突，就是假话；2） 当前的话中X或Y比N大，就是假话；3） 当前的话表示X吃X，就是假话。你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。 Input 第一行是两个整数N和K，以一个空格分隔。以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。若D=1，则表示X和Y是同类。若D=2，则表示X吃Y。 Output 只有一个整数，表示假话的数目。 Sample Input 12345678100 71 101 1 2 1 22 2 3 2 3 3 1 1 3 2 3 1 1 5 5 Sample Output 13 题目大意:( ﹁ ﹁ ) 中文题目读得懂.. 思路：确定关系的放在同一颗树里，另加一个r[]数组来记录每个结点和它的根节点的关系，r[]=0,代表同类;r[]=1,代表被父亲吃了；r[]=2，代表它吃了父亲。 满足其中一个为假话: 1） 当前的话与前面的某些真的话冲突，就是假话；2） 当前的话中X或Y比N大，就是假话；3） 当前的话表示X吃X，就是假话。 题目要判断假话的个数,输入的值为d,x,y。 首先可以判断x或者y是否大于N，如果大于，则假话数加一。 其次，通过find()函数找x，y的根结点判断是否相同。（相同说明有确定关系) 相同，则合并x，y所在的树，因为y被x吃所以将y树并在x树上，再更新y树对新的父结点的r[]值即r[fy]。 下面我们来分析一下r[fy]等于多少: fy-&gt;fx=fy-&gt;y+y-&gt;x+x-&gt;fx=3-r[y]+d-1+r[x] (因为d==1时，y-&gt;x=0;d==2时,y-&gt;x=1,所以y-&gt;x=1） 合并时: 1234567void unite(int x,int y,int d)&#123; int fx&#x3D;find(x); int fy&#x3D;find(y); p[fy]&#x3D;fx; r[fy]&#x3D;(r[x]-r[y]+3+(d-1))%3;&#125; 通过d的值来判断是否说谎。 如果d==1,r[x]!=r[y]，说谎数加一。 如果d==2,r[x]+1)%3!=r[y],说谎数加一。 查找: 12345678int find(int x)&#123; if(x&#x3D;&#x3D;p[x]) return x; int t&#x3D;p[x]; p[x]&#x3D;find(p[x]); r[x]&#x3D;(r[x]+r[t])%3; return p[x];&#125; 不相同，则两个结点建立关系。 AC代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;using namespace std;const int maxn &#x3D; 50000+10;int p[maxn]; int r[maxn];void set(int n) &#123; for(int x &#x3D; 1; x &lt;&#x3D; n; x++) &#123; p[x] &#x3D; x; r[x] &#x3D; 0; &#125;&#125; int find(int x) &#123; if(x &#x3D;&#x3D; p[x]) return x; int t &#x3D; p[x]; p[x] &#x3D; find(p[x]); r[x] &#x3D; (r[x]+r[t])%3; return p[x];&#125; void unite(int x, int y, int d)&#123; int fx &#x3D; find(x); int fy &#x3D; find(y); p[fy] &#x3D; fx; r[fy] &#x3D; (r[x]-r[y]+3+(d-1))%3; &#125; int main()&#123; int n, m; scanf(&quot;%d%d&quot;, &amp;n, &amp;m); set(n); int ans &#x3D; 0; int d, x, y; while(m--) &#123; scanf(&quot;%d%d%d&quot;, &amp;d, &amp;x, &amp;y); if(x &gt; n || y &gt; n || (d &#x3D;&#x3D; 2 &amp;&amp; x &#x3D;&#x3D; y)) ans++; else if(find(x) &#x3D;&#x3D; find(y)) &#123; if(d &#x3D;&#x3D; 1 &amp;&amp; r[x] !&#x3D; r[y]) ans++; if(d &#x3D;&#x3D; 2 &amp;&amp; (r[x]+1)%3 !&#x3D; r[y]) ans++; &#125; else unite(x, y, d); &#125; printf(&quot;%d\\n&quot;, ans); return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--今年暑假不AC","slug":"今年暑假不AC","date":"2019-11-30T16:00:00.000Z","updated":"2020-01-19T10:42:38.924Z","comments":true,"path":"2019/12/01/今年暑假不AC/","link":"","permalink":"http://yoursite.com/2019/12/01/%E4%BB%8A%E5%B9%B4%E6%9A%91%E5%81%87%E4%B8%8DAC/","excerpt":"","text":"题目 - 今年暑假不AC“今年暑假不AC？”“是的。”“那你干什么呢？”“看世界杯呀，笨蛋！”“@#$%^&amp;*%…” 确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目） Input 输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。 Output 对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。 Sample Input 1234567891011121314121 33 40 73 815 1915 2010 158 186 125 104 142 90 Sample Output 15 题目大意:中文题，意思很清楚了。 思路：要求看最多的节目，有三种思考方式:看最早开始时间（这个没用，不能保证两个节目不重合），用时最少的节目（这个也没用)，只有当上一个节目结束时才能进行下一个节目，所以下一个节目能否进行取决于上一个活动的最晚结束时间。因此，将每个时间的最晚结束时间先排序（由小到大），然后只要保证下一个活动的最早开始时间大于等于上一个活动的最晚结束时间就能顺利进行。由于要等所有的数据输入之后才能做出判断所以先用一个数组来存储最早开始时间和最晚结束时间（用结构体数组来存储)。 AC代码：1234567891011121314151617181920212223242526272829#include&lt;bits&#x2F;stdc++.h&gt; using namespace std;struct node&#123; int start,end;&#125;;bool cmp(const node&amp;a,const node&amp;b)&#123; return a.end&lt;b.end;&#125;int main()&#123; int n; while(cin&gt;&gt;n&amp;&amp;n)&#123; node time[99]; int count &#x3D; 0; int endtime &#x3D; -1; for(int i&#x3D;0;i&lt;n;i++)&#123; cin&gt;&gt;time[i].start&gt;&gt;time[i].end; &#125; sort(time,time+n,cmp); for(int i&#x3D;0;i&lt;n;i++)&#123; if(time[i].start&gt;&#x3D;endtime) &#123; ++count; endtime &#x3D; time[i].end; &#125; &#125; cout&lt;&lt;count&lt;&lt;endl;&#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"POJ 1988 Cube Stacking","slug":"Cube Stacking","date":"2019-11-28T16:00:00.000Z","updated":"2019-12-01T12:08:35.800Z","comments":true,"path":"2019/11/29/Cube Stacking/","link":"","permalink":"http://yoursite.com/2019/11/29/Cube%20Stacking/","excerpt":"","text":"题目 - Cube Stacking Farmer John and Betsy are playing a game with N (1 &lt;= N &lt;= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1&lt;= P &lt;= 100,000) operation. There are two types of operations:moves and counts.* In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y.* In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value. Write a program that can verify the results of the game. Input * Line 1: A single integer, P * Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a ‘M’ for a move operation or a ‘C’ for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X. Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself. Output Print the output from each of the count operations in the same order as the input file. Sample Input 12345676M 1 6C 1M 2 4M 2 6C 3C 4 Sample Output 123102 题意:有若干个方块，经p次操作后，在x方块下面的方块有多少个，M操作—&gt;将包含x方块的堆移到含y的堆上，C操作—&gt;输出x方块下方方块的数目。 思路： x方块下方方块数目=总数目-上方方块数目 如图所示 ![`T0X6L_@KNGWGV_IFP__4YG.png](https://i.loli.net/2019/12/01/5NJpSi28VfPBb4U.png) AC代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;iostream&gt;using namespace std;int f[30010],cnt[30010],up[30010];int find(int x)&#123; int y; if(x!&#x3D;f[x]) &#123; y&#x3D;f[x]; f[x]&#x3D;find(y); up[x]+&#x3D;up[y]; &#125; return f[x];&#125;void Union(int x,int y)&#123; int px&#x3D;find(x); int py&#x3D;find(y); if(px&#x3D;&#x3D;py) return ; front[py]&#x3D;px; up[py]&#x3D;cnt[px]; cnt[px]+&#x3D;cnt[py];&#125;int main()&#123; int p,i,j,x,y; char a; cin&gt;&gt;p; for(i&#x3D;1;i&lt;&#x3D;30000;i++) &#123; f[i]&#x3D;i; cnt[i]&#x3D;1; up[i]&#x3D;0; &#125; while(p--) &#123; cin&gt;&gt;a; if(a&#x3D;&#x3D;&#39;M&#39;) &#123; scanf(&quot;%d%d&quot;,&amp;x,&amp;y); Union(x,y); &#125; else &#123; scanf(&quot;%d&quot;,&amp;x); int px&#x3D;find(x); printf(&quot;%d\\n&quot;,cnt[px]-up[x]-1); &#125; &#125; return 0;&#125; 还有一种思路是把父亲放在下面，过程与上图类似，只不过是倒过来了。 AC代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;iostream&gt;using namespace std;int f[30010],cnt[30010],dis[30010];int find(int x)&#123; int y; if(x!&#x3D;f[x]) &#123; y&#x3D;f[x]; f[x]&#x3D;find(f[x]); dis[x]+&#x3D;dis[y]; &#125; return f[x];&#125;void Union(int x,int y)&#123; int px&#x3D;find(x); int py&#x3D;find(y); if(px&#x3D;&#x3D;py) return ; f[px]&#x3D;py; dis[px]+&#x3D;cnt[py]; cnt[py]+&#x3D;cnt[px];&#125;int main()&#123; int p,i,j,x,y; char a; cin&gt;&gt;p; for(i&#x3D;1;i&lt;&#x3D;30000;i++) &#123; front[i]&#x3D;i; dis[i]&#x3D;0; cnt[i]&#x3D;1; &#125; while(p--) &#123; cin&gt;&gt;a; if(a&#x3D;&#x3D;&#39;M&#39;) &#123; scanf(&quot;%d%d&quot;,&amp;x,&amp;y); Union(x,y); &#125; else &#123; scanf(&quot;%d&quot;,&amp;x); find(x); cout&lt;&lt;dis[x]&lt;&lt;endl; &#125; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"带权并查集","slug":"带权并查集","permalink":"http://yoursite.com/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"并查集专题","slug":"ACM训练--并查集","date":"2019-11-26T16:00:00.000Z","updated":"2020-01-19T10:41:10.663Z","comments":true,"path":"2019/11/27/ACM训练--并查集/","link":"","permalink":"http://yoursite.com/2019/11/27/ACM%E8%AE%AD%E7%BB%83--%E5%B9%B6%E6%9F%A5%E9%9B%86/","excerpt":"","text":"算法理解 ​ 并查集是一种树型的数据结构，用于处理一些不交集的合并和查询问题。联合-查找算法(union-find algorithm)定义了两个用于此数据结构的操作。 Union: 将两个子集合并成同一个集合，根据父节点的引用像根行进直到树根。 Find: 确定元素属于哪一个集合，方法就是不断的向上查找找到它的根节点，确定两个元素是否在同一个子集，将两棵树合并到一起，这通过将一颗树的根连接到另一棵树的根。 ​ 在并查集树中，每个集合的代表即是集合的根节点。 初始化 12for(int i&#x3D;1;i&lt;&#x3D;n;i++) pre[i]&#x3D;i;&#x2F;&#x2F;使每一个点的父结点都指向自己 查找 123456789101112131415&#x2F;&#x2F;递归int find(int x)&#123; if(pre[x]&#x3D;&#x3D;x) return x; return find(find(x));&#125;&#x2F;&#x2F;非递归int find(int x)&#123; int r&#x3D;x;&#x2F;&#x2F;将当前位置记录 while(pre(r)!&#x3D;r) &#x2F;&#x2F;如果不是根节点 r&#x3D;pre(r);&#x2F;&#x2F;继续向上查找，r的值更新为其父结点 return r;&#125; 但是这样写数据量大的时候会爆，下面来看路径压缩优化： 路径压缩优化 将某个根结点下的所有子结点都指向该根结点。 1234567891011121314151617int find(int x)&#123; int r&#x3D;x; while(pre[r]!&#x3D;r) &#123; r&#x3D;pre[r]; &#125; int i&#x3D;x;&#x2F;&#x2F;记录当前点 int j;&#x2F;&#x2F;记录i的上家 while(i!&#x3D;r)&#x2F;&#x2F;若当前点不是根结点 &#123; j&#x3D;pre[i];&#x2F;&#x2F;记录上家 pre[i]&#x3D;r;&#x2F;&#x2F;使当前点直接指向根节点 i&#x3D;j;&#x2F;&#x2F;当前点移动到上家 &#125; return r;&#125; 合并 123456void merge(int x,int y) &#x2F;&#x2F;合并集合 &#123; int t1&#x3D;find(x); &#x2F;&#x2F;找到x和y的根结点 int t2&#x3D;find(y); if(t1!&#x3D;t2) pre[t1]&#x3D;t2; &#x2F;&#x2F;所在集合不同，将其中一个作为另一个集合的子集(根结点一样)&#125; 例题：A - How Many TablesToday is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers. One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table. For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least. Input The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases. Output For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. Sample Input 1234567825 31 22 34 55 12 5 Sample Output 1224 AC代码:12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;using namespace std;const int maxn &#x3D; 1050;int s[maxn];void init_set()&#123; for(int i&#x3D;1;i&lt;maxn;i++) s[i]&#x3D;i;&#125;int find_set(int x)&#123; return x&#x3D;&#x3D;s[x]?x:find_set(s[x]);&#125;void union_set(int x,int y)&#123; x&#x3D;find_set(x); y&#x3D;find_set(y); if(x!&#x3D;y) s[x]&#x3D;s[y];&#125;int main()&#123; int t,m,n,x,y; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;n&gt;&gt;m; init_set(); for(int i&#x3D;1;i&lt;&#x3D;m;i++)&#123; cin&gt;&gt;x&gt;&gt;y; union_set(x,y); &#125; int ans&#x3D;0; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; if(s[i]&#x3D;&#x3D;i) ans++; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; B - Ubiquitous ReligionsThere are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in. You know that there are n students in your university (0 &lt; n &lt;= 50000). It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask m (0 &lt;= m &lt;= n(n-1)/2) pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion. Input The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0. Output For each test case, print on a single line the case number (starting with 1) followed by the maximum number of different religions that the students in the university believe in. Sample Input 1234567891011121314151610 91 21 31 41 51 61 71 81 91 1010 42 34 54 85 80 0 Sample Output 12Case 1: 1Case 2: 7 Hint Huge input, scanf is recommended. 题目大意:有 个学生，编号 ，每个学生最多有 个宗教信仰，输入 组数据，每组数据包含 ，表示同学 和同学 有相同的信仰，求在 名学生中最多存在多少种不同的宗教信仰。 思路：与A题一样。 AC代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;iostream&gt;using namespace std;const int maxn &#x3D; 50000+5;int s[maxn];int height[maxn];void init_set()&#123; for(int i &#x3D; 1;i&lt;&#x3D;maxn;i++)&#123; s[i]&#x3D;i; height[i]&#x3D;0; &#125;&#125;int find_set(int x)&#123; return x &#x3D;&#x3D; s[x] ? x:find_set(s[x]);&#125;void union_set(int x,int y)&#123; x &#x3D; find_set(x); y &#x3D; find_set(y); if(height[x] &#x3D;&#x3D; height[y])&#123; height[x] &#x3D; height[x] + 1; s[y] &#x3D; x; &#125;else&#123; if(height[x] &lt; height [y]) s[x] &#x3D; y; else s[y] &#x3D; x; &#125;&#125; int main()&#123; int t,n,m,x,y; int k&#x3D;1; while(cin &gt;&gt; n &gt;&gt;m &amp;&amp;m&amp;&amp;n)&#123; init_set(); for(int i &#x3D; 1;i&lt;&#x3D;m;i++)&#123; cin &gt;&gt;x&gt;&gt;y; union_set(x,y); &#125; int ans &#x3D; 0; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; if(s[i] &#x3D;&#x3D; i) ans++; &#125; cout&lt;&lt;&quot;Case &quot;&lt;&lt;k++&lt;&lt;&quot;: &quot;&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"VJudge--全排列","slug":"全排列","date":"2019-11-20T16:00:00.000Z","updated":"2020-01-19T10:42:23.840Z","comments":true,"path":"2019/11/21/全排列/","link":"","permalink":"http://yoursite.com/2019/11/21/%E5%85%A8%E6%8E%92%E5%88%97/","excerpt":"","text":"题目描述​ 排列与组合是常用的数学方法。先给一个正整数 ( 1 &lt; = n &lt; = 10 )例如n＝3，所有组合,并且按字典序输出：1 2 31 3 22 1 32 3 13 1 23 2 1 输入输入一个整数n( 1&lt;=n&lt;=10) 输出输出所有全排列 每个全排列一行，相邻两个数用空格隔开（最后一个数后面没有空格） 样例输入13 样例输出1234561 2 31 3 22 1 32 3 13 1 23 2 1 解析： ​ 1.首先我们考虑1号盒子，我们约定每到一个盒子面前都按数字递增的顺序摆放扑克牌。于是把1号扑克牌放到1号盒子中。​ 2.接着考虑2号盒子，现在我们手里剩下2号和3号扑克牌，于是我们可以把2号扑克牌放入2号盒子中。于是在3号盒子只剩一种可能性，我们继 续把3号扑克放入3号盒子。此时产生了一种排列——{1,2,3 ​ 3.接着我们收回3号盒子中的3号扑克牌，尝试一种新的可能，此时发现别无他选。于是选择回到2号盒子收回2号扑克。 ​ 4.在2号盒子中我们放入3号扑克，于是自然而然的在3号盒子中只能放入2号扑克。此时产生另一种排列——{1,3,2}； ​ 5.重复以上步骤就能得到数字{123}的全排列。 1、现在我们用C语言代码描述往每个小盒子中放入所有可能扑克牌的步骤： for(int i = 1; i &lt;= n; i++){ a[step] = i; //将i号扑克牌放入第step个盒子中 } 2、a是一个装入了所有小盒子的数组，变量step表示当前正处于第step号小盒子。i则表示扑克牌的序号。现在我们需要考虑另外一个问题，则如果一张扑克牌已经被放入别的盒子中，则不能再被放入当前盒子。 因此需要一个book数组标记哪些牌已经被使用。此时我们完善上述代码。 for(int i = 1; i &lt;= n; i++){ if(book[i] == 0){ a[step] = i; //将i号扑克牌放入第step个盒子中 book[i] = 1; // 置1表示第i号扑克牌不在手中 } } 现在对于step号盒子已经处理完，那么我们要考虑step+1号盒子。第step+1个的盒子的处理方式与第step个盒子的处理方式完全一样。因此，我们可以对上述操作做一个封装。 void dfs(int step) { //step表示当前要处理的盒子 for(int i = 1; i &lt;= n; i++) { if(book[i] == 0) { a[step] = i; //将i号扑克牌放入第step个盒子中 book[i] = 1; // 置1表示第i号扑克牌不在手中 } } } 于是我们重新回想文章开头阐述的放置扑克牌的思路： 我们在当前盒子放置完第i个扑克牌之后，便立即处理下一个盒子。于是： void dfs(int step) { //step表示当前要处理的盒子 for(int i = 1; i &lt;= n; i++) { if(book[i] == 0) { a[step] = i; //将i号扑克牌放入第step个盒子中 book[i] = 1; // 置1表示第i号扑克牌不在手中 dfs(step+1); //递归调用 book[i] = 0; // 非常重要，收回该盒子中的扑克牌才能进行下一次尝试。 } } } 需要注意到的是，我们需要收回每一次尝试的扑克牌i，才能进行下一次尝试。 现在需要考虑最后一个问题，那就是什么时候得到一个满足要求的排列，也就是考虑终止条件。这里很容易得到，当我们处理完成第n个盒子的时候，就已经得到一个符合要求的排列了。加上终止条件的代码如下： void dfs(int step){ //step表示当前要处理的盒子 if(step == n+1) { //输出排列 for(i = 1; i &lt;= n; i++) printf(“%d”, a[i]); printf(“\\n”); return; } for(int i = 1; i &lt;= n; i++) { if(book[i] == 0) { a[step] = i; //将i号扑克牌放入第step个盒子中 book[i] = 1; // 置1表示第i号扑克牌不在手中 dfs(step+1); //递归调用 book[i] = 0; // 非常重要，收回该盒子中的扑克牌才能进行下一次尝试。 } } } 现在深度优先搜索（DFS）的基本模型展现在我们眼前。 其核心在于，在当前步骤要把每一种可能性都尝试一遍（使用for循环），解决完当前步骤后进入下一步。而下一步的解决方式完全等同于当前步骤的解决方法。于是可以总结出DFS的基本模型： void dfs(int step){ 判断结束边界 尝试每一种可能 for(i = 1; i &lt;= n; i++) { 尝试下一步 dfs(step + 1); } return; }","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"深搜递归入门","slug":"深搜递归入门","permalink":"http://yoursite.com/tags/%E6%B7%B1%E6%90%9C%E9%80%92%E5%BD%92%E5%85%A5%E9%97%A8/"}]},{"title":"HDU2030--汉字统计","slug":"汉字统计","date":"2019-11-17T16:00:00.000Z","updated":"2019-11-29T15:48:40.233Z","comments":true,"path":"2019/11/18/汉字统计/","link":"","permalink":"http://yoursite.com/2019/11/18/%E6%B1%89%E5%AD%97%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"汉字统计 Problem Description 统计给定文本文件中汉字的个数。 Input 输入文件首先包含一个整数n，表示测试实例的个数，然后是n段文本。 Output 对于每一段文本，输出其中的汉字的个数，每个测试实例的输出占一行。 [Hint:]从汉字机内码的特点考虑~ Sample Input 1232WaHaHa! WaHaHa! 今年过节不说话要说只说普通话WaHaHa! WaHaHa!马上就要期末考试了Are you ready? Sample Output 12149 Author lcy Source C语言程序设计练习（五） Recommend lcy | We have carefully selected several similar problems for you: 2031 2032 2026 2027 2024 思路：从汉字机内码的角度考虑，汉子机内码都是占两个字节且每个字节的第一个二进制位都是0,就是都为负数，除2就是汉字个数。 AC： 12345678910111213141516#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;int main()&#123; int n; cin&gt;&gt;n; getchar(); while(n--)&#123; char c; int m&#x3D;0; while((c&#x3D;getchar())!&#x3D;&#39;\\n&#39;) if(c&lt;0) m++; cout&lt;&lt;m&#x2F;2&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"HDU第一阶段","slug":"HDU第一阶段","permalink":"http://yoursite.com/tags/HDU%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"}]},{"title":"常见OJ错误","slug":"OJ错误","date":"2019-11-17T16:00:00.000Z","updated":"2019-11-29T15:46:53.548Z","comments":true,"path":"2019/11/18/OJ错误/","link":"","permalink":"http://yoursite.com/2019/11/18/OJ%E9%94%99%E8%AF%AF/","excerpt":"&emsp;&emsp;记录一下我在做题过程中WA的原因。","text":"&emsp;&emsp;记录一下我在做题过程中WA的原因。 ​ float换为double，如hdu2003。大家在做题的时候还是养成用double的习惯，因为一般由于用double而不是float导致超内存和超时而引起的问题很少出现。 ​ scanf()输入时注意用getchar（）存取换行符。 ​ 在输入数据时要考虑输入的数据是否满足条件，如hdu2007 。输入两个正整数x，y并不默认表示x&lt;y,在写代码时要判断一下是否x&lt;y，不然就WA掉了。而且要考虑到可能会出现的情况以及读清楚题意，如hdu2054。判断A和B是否相等，但题目并没有告诉A,B是什么类型，由于我默认认为它是整型，于是它又WA了。(我寻思这个题怎么这么简单…)。 ​ 一定要注意审题，如果题目没有说是整数就当double型以免WA掉例如hdu2039。 一些其他的错误: Presentation Error：注意一下最后一行有没有空格，在循环体中判断一下是不是最后一行。 Output Limit Exceeded：输入时用scanf()没有加!=EOF，陷入死循环(用cin可)。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"OJ错误","slug":"OJ错误","permalink":"http://yoursite.com/tags/OJ%E9%94%99%E8%AF%AF/"}]},{"title":"STL和基本数据结构","slug":"STL和基本数据结构","date":"2019-11-03T04:40:15.000Z","updated":"2019-11-29T15:45:55.614Z","comments":true,"path":"2019/11/03/STL和基本数据结构/","link":"","permalink":"http://yoursite.com/2019/11/03/STL%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"&emsp;&emsp;STL(Standard Template Library)是C++的标准模板库熟练掌握它们在很多题目中能极大地简化编程，需要完全掌握。","text":"&emsp;&emsp;STL(Standard Template Library)是C++的标准模板库熟练掌握它们在很多题目中能极大地简化编程，需要完全掌握。 &emsp;&emsp;STL包括容器(container)、迭代器(iterator)、空间配置器(allocator)、配接器(adapter)、算法(algorithm)、仿函数(functor)6个部分。 &emsp; 容器 &emsp; 1.顺序式容器 vector ：动态数组，从末尾能快速插入与删除，直接访问任何元素。 list ：双链表，从任何地方快速插入和删除。 deque ：双向队列，从前面或后面快速插入与删除，直接访问任何元素。 queue：队列，先进先出。 priority_queue：优先队列，最高优先级元素总是第一个出列。 stack：栈，后进先出。 &emsp; 2.关联式容器 set：集合，快速查找，不允许重复值。 map：一对多映射，基于关键字快速查找，不允许重复值。 multiset：快速查找，允许重复值。 multimap：一对多映射，基于关键字快速查找，允许重复值。 &emsp; vector hdu 4841 “圆桌问题” [https://vjudge.net/contest/337673#problem/A]: 123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector &lt;int&gt; table; int m,n; while(cin&gt;&gt;n&gt;&gt;m)&#123; table.clear(); for(int i&#x3D;0;i&lt;2*n;i++) table.push_back(i); int pos &#x3D; 0; for(int i&#x3D;0;i&lt;n;i++)&#123; pos &#x3D; (pos+m-1)%table.size(); table.erase(table.begin()+pos); &#125; int j&#x3D;0; for(int i&#x3D;0;i&lt;2*n;i++)&#123; if(!(i%50)&amp;&amp;i) cout&lt;&lt;endl; if(j&lt;table.size()&amp;&amp;i&#x3D;&#x3D;table[j])&#123; j++; cout&lt;&lt;&quot;G&quot;; &#125; else cout&lt;&lt;&quot;B&quot;; &#125; cout&lt;&lt;endl&lt;&lt;endl; &#125; return 0;&#125; &emsp; stack hdu 1062 ”Text Reverse“ [https://vjudge.net/contest/337673#problem/B]: 1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;int main()&#123; int n; char ch; scanf(&quot;%d&quot;,&amp;n); ch &#x3D; getchar(); while(n--)&#123; stack&lt;char&gt;s; while(true)&#123; ch &#x3D; getchar(); if(ch&#x3D;&#x3D;&#39;\\n&#39;||ch&#x3D;&#x3D;&#39; &#39;||ch&#x3D;&#x3D;EOF)&#123; while(!s.empty())&#123; printf(&quot;%c&quot;,s.top()); s.pop(); &#125; if(ch&#x3D;&#x3D;&#39;\\n&#39;||ch&#x3D;&#x3D;EOF) break; printf(&quot; &quot;); &#125; else s.push(ch); &#125; printf(&quot;\\n&quot;); &#125; return 0;&#125; hdu 1237 “简单计算器” [https://vjudge.net/contest/337673#problem/C]: 思路：(太懒了8想写了..) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;iostream&gt;#include&lt;stack&gt;using namespace std;int P(char c)&#123; if (c &#x3D;&#x3D; &#39;+&#39; || c &#x3D;&#x3D; &#39;-&#39;) return 1; return 2;&#125;double Ans(double x, double y, char c)&#123; if (c &#x3D;&#x3D; &#39;+&#39;) return x + y; if (c &#x3D;&#x3D; &#39;-&#39;) return x - y; if (c &#x3D;&#x3D; &#39;*&#39;)return x*y; return x &#x2F; y;&#125;int main() &#123; int n; while (scanf(&quot;%d&quot;,&amp;n)!&#x3D;EOF) &#123; char c &#x3D; getchar(); if (c&#x3D;&#x3D;&#39;\\n&#39;&amp;&amp;n &#x3D;&#x3D; 0)break; stack&lt;char&gt; op; stack&lt;double&gt;num; num.push(n); while (true) &#123; scanf(&quot;%c %d&quot;, &amp;c, &amp;n); char k &#x3D; getchar(); while (!op.empty()&amp;&amp;P(c)&lt;&#x3D;P(op.top())) &#123; char t &#x3D; op.top(); op.pop(); double y &#x3D; num.top(); num.pop(); double x &#x3D; num.top(); num.pop(); double ans &#x3D; Ans(x, y, t); num.push(ans); &#125; op.push(c); num.push(n); if (k &#x3D;&#x3D; &#39;\\n&#39;)break; &#125; while (!op.empty()) &#123; char t &#x3D; op.top(); op.pop(); double y &#x3D; num.top(); num.pop(); double x &#x3D; num.top(); num.pop(); double ans &#x3D; Ans(x, y, t); num.push(ans); &#125; printf(&quot;%.2f\\n&quot;, num.top()); &#125; return 0;&#125; &emsp; Queue hdu 1702 ”ACboy needs your help again！“ [https://vjudge.net/contest/337673#problem/D]: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;queue&gt;#include&lt;stack&gt;using namespace std;int main()&#123; int t,temp,n; cin&gt;&gt;t; while(t--)&#123; string str1,str; queue&lt;int&gt;Q; stack&lt;int&gt;S; cin&gt;&gt;n&gt;&gt;str; for(int i&#x3D;0;i&lt;n;i++)&#123; if(str&#x3D;&#x3D;&quot;FIFO&quot;)&#123; cin&gt;&gt;str1; if(str1 &#x3D;&#x3D; &quot;IN&quot;)&#123; cin&gt;&gt;temp; Q.push(temp); &#125; if(str1 &#x3D;&#x3D; &quot;OUT&quot;)&#123; if(Q.empty()) cout&lt;&lt;&quot;None&quot;&lt;&lt;endl; else &#123; cout&lt;&lt;Q.front()&lt;&lt;endl; Q.pop(); &#125; &#125; &#125; else &#123; cin&gt;&gt;str1; if(str1 &#x3D;&#x3D; &quot;IN&quot;)&#123; cin&gt;&gt;temp; S.push(temp); &#125; if(str1 &#x3D;&#x3D; &quot;OUT&quot;)&#123; if(S.empty()) cout&lt;&lt;&quot;None&quot;&lt;&lt;endl; else &#123; cout&lt;&lt;S.top()&lt;&lt;endl; S.pop(); &#125; &#125; &#125;&#125;&#125; return 0;&#125; hdu 1873 ”看病要排队“ [https://vjudge.net/contest/337673#problem/E]: 注意队列中存放结构体的情况 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;string.h&gt;using namespace std;struct node&#123; int n,id;&#125;st;bool operator &lt; (const node&amp;a,const node&amp;b)&#123; if(a.n&#x3D;&#x3D;b.n) return a.id&gt;b.id; else return a.n&lt;b.n;&#125;int main()&#123; int n; while(scanf(&quot;%d&quot;,&amp;n)!&#x3D;EOF)&#123; priority_queue&lt;node&gt; q[4]; char s[10]; int a,b; int k&#x3D;1; for(int i&#x3D;0;i&lt;n;i++)&#123; scanf(&quot;%s %d&quot;,s,&amp;a); if(strcmp(s,&quot;IN&quot;)&#x3D;&#x3D;0)&#123; scanf(&quot;%d&quot;,&amp;b); st.n&#x3D;b; st.id&#x3D;k++; q[a].push(st); &#125; else &#123; if(!q[a].empty())&#123; st &#x3D; q[a].top(); q[a].pop(); printf(&quot;%d\\n&quot;,st.id); &#125; else printf(&quot;EMPTY\\n&quot;); &#125; &#125; &#125; return 0;&#125; &emsp; list hdu 1276 ”士兵队列训练问题“ [https://vjudge.net/contest/337673#problem/F]: 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#include&lt;list&gt;using namespace std;int main()&#123; int t,n; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;n; int k &#x3D; 2; list&lt;int&gt;mylist; list&lt;int&gt;::iterator it; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; mylist.push_back(i); &#125; while(mylist.size()&gt;3)&#123; int num &#x3D; 1; for(it &#x3D; mylist.begin();it !&#x3D; mylist.end();)&#123; if(num++%k&#x3D;&#x3D;0) it &#x3D; mylist.erase(it); else it++; &#125; k&#x3D;&#x3D;2?k&#x3D;3:k&#x3D;2; &#125; for(it &#x3D;mylist.begin();it!&#x3D;mylist.end();it++)&#123; if(it!&#x3D;mylist.begin()) cout&lt;&lt;&quot; &quot;; cout&lt;&lt;*it; &#125; cout&lt;&lt;endl; &#125; return 0;&#125; &emsp; set hdu 2094 “产生冠军” [https://vjudge.net/contest/337673#problem/G]: 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;set&gt;using namespace std;int main()&#123; set&lt;string&gt;A,B; string s1,s2; int n; while(cin&gt;&gt;n&amp;&amp;n)&#123; for(int i&#x3D;0;i&lt;n;i++)&#123; cin&gt;&gt;s1&gt;&gt;s2; A.insert(s1); A.insert(s2); B.insert(s2); &#125; if(A.size()-B.size()&#x3D;&#x3D;1) &#123; cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl; &#125; else cout&lt;&lt;&quot;No&quot;&lt;&lt;endl; A.clear(); B.clear(); &#125; return 0;&#125; &emsp; map hdu 2648 “Shopping” [https://vjudge.net/contest/337673#problem/H]: 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;map&gt;#include&lt;string&gt;using namespace std;int main()&#123; int n,m,p; map&lt;string,int&gt;shop; while(cin&gt;&gt;n)&#123; string s; for(int i&#x3D;0;i&lt;n;i++)&#123; cin&gt;&gt;s; &#125; cin&gt;&gt;m; while(m--)&#123; for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; cin&gt;&gt;p&gt;&gt;s; shop[s]+&#x3D;p; &#125; int rank&#x3D; 1; map&lt;string,int&gt;::iterator it; for(it &#x3D; shop.begin();it!&#x3D;shop.end();it++)&#123; if(it-&gt;second&gt;shop[&quot;memory&quot;])&#123; rank++; &#125; &#125; cout&lt;&lt;rank&lt;&lt;endl; &#125; shop.clear();&#125; return 0;&#125; &emsp; next_permutation hdu 1027 \"Ignatius and the Princess II\" [https://vjudge.net/contest/337673#problem/I]: 1234567891011121314151617181920#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[1001]; int n,m; while(cin&gt;&gt;n&gt;&gt;m)&#123; for(int i&#x3D;1;i&lt;&#x3D;n;i++) a[i]&#x3D;i; int b &#x3D; 1; do&#123; if(m&#x3D;&#x3D;b) break; b++; &#125;while(next_permutation(a+1,a+1+n)); for(int i&#x3D;1;i&lt;n;i++)&#123; cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;; &#125; cout&lt;&lt;a[n]&lt;&lt;endl; &#125; return 0;&#125; hdu 1716 “排列2” [https://vjudge.net/contest/337673#problem/J]: 12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; using namespace std; int main()&#123; int a[5],tag&#x3D;0; while(scanf(&quot;%d%d%d%d&quot;,&amp;a[0],&amp;a[1],&amp;a[2],&amp;a[3])) &#123; if(a[0]&#x3D;&#x3D;0 &amp;&amp; a[1]&#x3D;&#x3D;0 &amp;&amp; a[2]&#x3D;&#x3D;0 &amp;&amp; a[3]&#x3D;&#x3D;0) break; if(tag) printf(&quot;\\n&quot;); tag&#x3D;1; int flag&#x3D;1,tmp; do &#123; if(a[0]&#x3D;&#x3D;0) continue; if(flag) &#123; printf(&quot;%d%d%d%d&quot;,a[0],a[1],a[2],a[3]); flag&#x3D;0; &#125; else if(tmp&#x3D;&#x3D;a[0]) printf(&quot; %d%d%d%d&quot;,a[0],a[1],a[2],a[3]); else printf(&quot;\\n%d%d%d%d&quot;,a[0],a[1],a[2],a[3]); tmp&#x3D;a[0]; &#125;while(next_permutation(a,a+4)); printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"STL","slug":"STL","permalink":"http://yoursite.com/tags/STL/"}]},{"title":"数据结构-快慢指针","slug":"数据结构-快慢指针","date":"2019-10-02T16:00:00.000Z","updated":"2019-11-29T15:43:12.788Z","comments":true,"path":"2019/10/03/数据结构-快慢指针/","link":"","permalink":"http://yoursite.com/2019/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/","excerpt":"&emsp;&emsp;快慢指针中的快慢指的是移动的步长，即每次向前移动速度的快慢,在使用快慢指针时可以让快指针每次沿链表向前移动2，慢指针每次向前一次。","text":"&emsp;&emsp;快慢指针中的快慢指的是移动的步长，即每次向前移动速度的快慢,在使用快慢指针时可以让快指针每次沿链表向前移动2，慢指针每次向前一次。 &emsp;快慢指针的应用 &emsp; (一)寻找链表中心 ​ 原理:快指针的移动速度是慢指针移动速度的两倍，因此当快指针到达表尾时慢指针到达中点，但要分奇偶情况讨论。 代码: 1234567891011121314151617181920212223while(fast &amp;&amp; slow)&#123;​ if(fast-&gt;next &#x3D;&#x3D; NULL)&#123;​ return slow-&gt;data;&#125;​ else if(fast-&gt;next !&#x3D; NULL&amp;&amp;fast-&gt;next-&gt;next &#x3D;&#x3D; NULL)&#123;​ return (slow-&gt;data + slow-&gt;next-&gt;data)&#x2F;2;&#125;​ else &#123;​ fast &#x3D; fast-&gt;next-&gt;next;​ slow &#x3D; slow-&gt;next;&#125;&#125; &emsp; (二)判断单链表中是否存在环 原理:类似于在操场上跑步，快指针的速度是慢指针移动速度的两倍，让两个指针都从链表头开始遍历，如果快指针最后指向空，则说明并没有环；如果最终快慢指针相等，则说明快指针追了上慢指针存在环。 代码： 123456789101112131415161718192021bool JudgeCircle(LNode *head)&#123;​ if(head&#x3D;&#x3D;NULL) return false;​ LNode *slow &#x3D; head;​ LNode *fast &#x3D; head;​ while(fast !&#x3D; NULL &amp;&amp; fast-&gt;next-&gt;next !&#x3D; NULL)&#123;​ slow &#x3D; slow-&gt;next;​ fast &#x3D; fast-&gt;next-&gt;next;​ if(slow &#x3D;&#x3D; fast) return true;&#125;​ return false;&#125; &emsp; (三)判断两个单链表是否相交 原理:首先利用快慢指针判断链表是否存在环。 (1)如果都不存在环，则如果两个单向链表有公共节点，也就是两个链表从某一节点开始，他们的p-&gt;next都指向同一个节点，每个节点只有一个p-&gt;next。因此从第一个公共节点开始，之后它们所有节点都是重合的。因此，首先两个链表各遍历一次，求出两个链表的长度L1、L2，然后可以得到它们的长度差L。然后现在长的链表上遍历L个节点，之后再同步遍历，于是在遍历中，第一个相同的节点就是第一个公共的节点。此时，若两个链表长度分别为M，N,则时间复杂度为O(M+N). (2)如果一个存在环，另外一个不存在环，则这两个链表是不可能相交的。 (3)如果利用快慢指针发现两个链表都存在环，则判断任意一个链表上快慢指针相遇的那个节点，在不在另外一个链表上，如果在，则相交，不在，则不相交。 第一种情况实现代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253void Intersect(LinkList L1, LinkList L2) &#123; if (L1 &#x3D;&#x3D; NULL || L2 &#x3D;&#x3D; NULL) &#123; exit(); &#125; LinkList p &#x3D; L1; LinkList q &#x3D; L2; int length1 &#x3D; 0; int length2 &#x3D; 0; int len &#x3D; 0;while (p-&gt;next) &#123; length1 ++; p &#x3D; p-&gt;next;&#125;while (q-&gt;next) &#123; length2 ++; q &#x3D; q-&gt;next;&#125;cout&lt;&lt;p&lt;&lt;q;cout&lt;&lt;length1&lt;&lt;length2;if (p &#x3D;&#x3D; q) &#123; cout&lt;&lt;&quot;相交&quot;;if (length1 &gt; length2) &#123; len &#x3D; length1 - length2; p &#x3D; L2; q &#x3D; L1;&#125;else &#123; len &#x3D; length2 - length1; p &#x3D; L1; q &#x3D; L2;&#125;while (len) &#123; q &#x3D; q-&gt;next; len--;&#125;while (p !&#x3D; q) &#123; p &#x3D; p-&gt;next; q &#x3D; q-&gt;next;&#125;cout&lt;&lt;p-&gt;data;&#125;else &#123; cout&lt;&lt;&quot;不相交&quot;;&#125;&#125; &emsp;总结 上边的题是我在写LeetCode的时候发现挺有意思的就做了个汇总（当然还有一些其他的题目我想了好久，后边有时间再写），类似的题目还有寻找环的入口以及输出链表中倒数第K个节点。原理其实都差不多所以这两个题我就没有写上来。（参考来源于csdn,博客园,百度百科）","categories":[],"tags":[{"name":"快慢指针","slug":"快慢指针","permalink":"http://yoursite.com/tags/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"}]},{"title":"国庆前夕之学习历程","slug":"回文链表","date":"2019-09-28T16:00:00.000Z","updated":"2019-11-29T11:18:01.206Z","comments":true,"path":"2019/09/29/回文链表/","link":"","permalink":"http://yoursite.com/2019/09/29/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/","excerpt":"&emsp; 刚学完数据结构的第二章，今天在写“回文链表”时遇到一点问题。","text":"&emsp; 刚学完数据结构的第二章，今天在写“回文链表”时遇到一点问题。 &emsp;&emsp;我的思路如下：用一个头指针head和一个尾指针tail，头指针向前移动head++，尾指针向后移动tail--,在这个过程中比较他们的值是否相等，如果不相等则返回false；如果相等则两个指针继续移动直至两个指针重合则返回true，说明它是回文链表，但是我编译运行之后并没有得到结果，我在想哪里出了问题，感觉思路没有问题，在看了代码之后我在想能不能用tail--逆向遍历链表呢，如果能逆向遍历那岂不是逆转链表特别容易了吗根本不用迭代和递归了，于是我去向别人求助查阅资料，得知链表中不能进行自增自减运算只能用p=p->next,我是感觉这两种一样，但为什么实际上不一样呢，然后我写了一个程序来验证。 &emsp;&emsp;程序测试结果表明，p++和p->next确实不一样，链表加1后不一定指向下一个节点，物理位置并没有连着。由于当时想到了线性表合并中两个指针的自增操作，把它带进了链表中，实际上顺序表是顺序存储结构，但链表并不是，所以p++并不等于p->next。 ​ 接着，说一下这几天写程序的感想。 ​ 《数据结构与算法》这本书非常重要，我们老师在给我们上课时讲到大二一定要过“编程关”，并建议我们每天花上一两个小时写程序。虽然我们是计算机科学与技术专业，编程能力的要求可能也没有软件工程要高，但是我觉得在学习中要以软件工程的标准来要求自己，有时间就去写写程序，量变达到质变，能力太重要啦。另外一点小小感悟，没事的时候就爱随便翻翻网站，今天逛了ccpc网络选拔赛和LeetCode的周赛排名榜，全国排名或者世界排名靠前的人基本上都是清华北大以及一些其他实力较强的985院校，像我所在的普通一本院校连报名的人都很少更别说获奖了，其实绝大多数人给我的感觉都不知道自己真正想要的是什么。可能差距从高考那一天就已经开始了，有时也会感悟，985院校真的会给你提供一个完全不一样的更高的平台。我也想好好努力，以考研为跳板去一个更高的平台，遇见更优秀的你和我！","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"回文链表","slug":"回文链表","permalink":"http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"}]},{"title":"生活琐事","slug":"生活琐事","date":"2019-09-11T16:00:00.000Z","updated":"2019-11-29T11:15:57.436Z","comments":true,"path":"2019/09/12/生活琐事/","link":"","permalink":"http://yoursite.com/2019/09/12/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/","excerpt":"&emsp;生活碎片-1","text":"&emsp;生活碎片-1 &emsp;&emsp;最近喜欢上一句话“I love three things in the world,the sun,the moon and you，the sun for the day,the moon for the night,and you forever\",我什么时候会对一个人说这样的话呢。 &emsp;&emsp;心情复杂，烦恼又急切，焦虑又难过。明明是18岁最好的年纪，总是感觉达不到自己的期望值。这学期java，数据结构，python，四种语言混着用还是挺怕自己有些地方混淆，虽然这学期课也挺少的但是事情是真的多，C语言过编程关，java，python都得一起学以及12月份的英语六级。有时候我会想，我为什么大学不选个师范院校的英语专业或者就听我爸学医以后就安安逸逸的过自己一生得了，非得执着于计算机，可能我骨子里就是这样不安定，爱挑战一些有难度，新鲜的事物。每完成一道编程大题我就有一种做完一道奥数题的感觉，这种成就感和快乐让我很享受。还有一件最最最令人难过的事情，刚刚称了一下体重，真的胖了好多！！我不能再这样吃下去了！从明天开始，我要让这些不愉快都留在2019年，以一个更好的姿态迎接2020年！迎接19岁更好的自己！生活还是需要很多仪式感的。给我冲！！！（前面说完这些话，心情真的好多了）哦对了，明天中秋节我先祝自己中秋节快乐，而且我买了星光音乐节的票有赵雷还有隔壁老樊等等等这些民谣歌手，虽然我表面看起来是个喜欢技术的人但我骨子里应该算是个文艺的人。今天就说到这吧，晚安！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"The first article","slug":"第一篇博客","date":"2019-08-27T06:40:15.000Z","updated":"2019-11-29T11:14:51.826Z","comments":true,"path":"2019/08/27/第一篇博客/","link":"","permalink":"http://yoursite.com/2019/08/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"&emsp;&emsp;前几天在网上查资料的时候，看见别人的精美的博客页面，我寻思我可不可以也做一个自己的博客。说时迟，那时快，决定之后我立马就动手做了。 &emsp;&emsp;在CSDN，简书，博客园等的帮助下，我从在腾讯云上购买域名到注册github绑定域名，创建仓库，配置SSH key，修改主题，上传到github上等。这个过程中也遇到了一些问题（我也是算是小白中的小白了，这些东西都是第一次接触），多亏了互联网的强大，我才辛辛苦苦把我的个人网站搭建起来。虽然有一丝简陋，以后学习更多的新知识再改吧，拥有自己一小块地的感觉太好了（我可以为所欲为）。 &emsp;&emsp;这个博客以后主要是用来记录和总结我的学习以及生活，路漫漫其修远兮，吾将上下而求索！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"}]}]}